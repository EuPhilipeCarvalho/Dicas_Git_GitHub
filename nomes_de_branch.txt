O nosso padr√£o
Branches
Nomes de branches s√£o compostos de 3 partes:

1 ‚Äî type ou categoria do branch. Os types podem ser os seguintes:

docs: apenas mudan√ßas de documenta√ß√£o;
feat: uma nova funcionalidade;
fix: a corre√ß√£o de um bug;
perf: mudan√ßa de c√≥digo focada em melhorar performance;
refactor: mudan√ßa de c√≥digo que n√£o adiciona uma funcionalidade e tamb√©m n√£o corrigi um bug;
style: mudan√ßas no c√≥digo que n√£o afetam seu significado (espa√ßo em branco, formata√ß√£o, ponto e v√≠rgula, etc);
test: adicionar ou corrigir testes.
2 ‚Äî o que o branch faz em si.

3 ‚Äî C√≥digo da tarefa no Jira. Ex.: PL-123.

Exemplos de alguns nomes de branches que podem existir em nossa aplica√ß√£o:

feat-cadastro-veiculos-PL-123
refactor-edicao-colaboradores-PL-355
fix-busca-checklists-PL-232
O c√≥digo da tarefa no Jira √© extremamente importante, ele ajuda autor e reviewer a localizarem o branch correto e tamb√©m permite ao Jira linkar automaticamente um branch a uma tarefa, tornando o mesmo acess√≠vel a partir da tarefa:


Commits
O padr√£o usado aqui na Prolog App foi fortemente inspirado nos guidelines de commit do angular.

Essa √© a estrutura que seguimos para um commit:

<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
Vamos dissec√°-la:

1 ‚Äî type ou categoria do commit: podem ser os mesmos utilizados para criar branches e que foram explicados acima.

2 ‚Äî scope: onde a altera√ß√£o foi feita. Aqui, criamos nossos pr√≥prios scopes que, na maioria dos casos, refletem o nome de uma funcionalidade.

3 ‚Äî subject: um resumo do commit. Deve utilizar o imperativo, como: faz, adiciona, altera, muda e etc.

4 ‚Äî body: espa√ßo utilizado para detalhar o que foi feito. √â opcional.

5 ‚Äî footer: onde colocamos as PLs (c√≥digos das tarefas no Jira) e tamb√©m alguma breaking change.

Onde tem <BLANK LINE> significa que temos que deixar uma linha em branco. ü§∑üèª‚Äç‚ôÇÔ∏è

Exemplo de um commit:

refactor(ve√≠culo): altera inser√ß√£o da placa para utilizar trim
PL-1234
Perceba que o exemplo acima n√£o possui body.

T√£o importante quanto definir um padr√£o, √© deixar ele facilmente acess√≠vel ao time. Aqui, cada um tem o seu ‚Äúcheat sheet‚Äù bem resumido e col√°-lo ao monitor pode ser bem eficiente.


Aqui, n√≥s come√ßamos o projeto sem ter um padr√£o definido para os branches e commits. Por√©m, demos um grande salto em organiza√ß√£o quando isso foi feito. Caso sua equipe n√£o possua nada definido, nunca √© tarde para come√ßar.